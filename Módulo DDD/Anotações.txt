================================== Elementos Táticos ==================================
	- Quando estamos falando sobre DDD e precisamos olhar mais a funcod um bounded context;
	
	- Precisamos ser capazes de modelarmos de forma mais assertiva os seus principais
	componentes, comportamentos e individualidades, bem como suas relações;
	
================================== Entidade ==================================
	- "Uma entidade é algo único que é capaz de ser alterado de forma contínua
	durante um longo período de tempo." - Vernon, Vaughn. Implementing Domain-Driven Design;
	
	- "Uma entidade é algo que possui uma continuidade em seu ciclo de vida e pode ser
	distinguida independente dos atributos que são importantes parar a aplicação do usuario.
	Pode ser uma pessoa, cidade, carro, um ticket de loteria ou uma transação bancaria."
	Evans, Eric. Domain-Driven Design;
	
	- Uma Entidade é uma Identidade, ou seja, ela é única;
	
	- A modelagem sempre representa o negócio;
		- Nunca usar classes anêmicas para representar uma entidade de negocio;
		- Sempre usar métodos que representam uma regra de negócio da entidade;
		- Expresividade semântica;
	
	- Uma Entidade sempre terá que reprentar o estado atual e correto daquele elemento;
	- A Entidade sempre tem que ser confiável e consistente;
	
	- Uma Entidade sempre poderá ser autovalidada;
	
	- A Entidade é diferente de Modelo de dados, a Entidade é o negócio e o Modelo de dados é
	os dados representados no banco de dados;
	
	- Como representar isso atravez da estrutura do projeto?
		Complexidade do negocio (aonde se trata somente do negócio)
		Domain
		- Entity
			- customer.cs (aqui está as regras de negocio)
		
		Complexidade acidental
		Infra (aonde se é realizado a comunicação com o mundo externo)
		- Model / Entity
			- customer.cs / costumerModel.cs (aqui terá os gets e sets)
			
================================== Value Objects ==================================
	
	- "Quando você se preocupa apenas com os atributos de um elemento de um model,
	classifique isso como um value object" Evans, Eric;
	
	- "Trate o Value Object como imutável" Evans, Eric;
	
	- Ter que ser autovalidado;
	
	- Não tem identificador, ele é somente um conjunto de propriedades;
	
================================== Agregados ==================================

	- "Um agregado é um conjunto de objetos associados que tratamos como uma unidade
	para propósitos de mudança de dados" Evans, Eric;
	
================================== Domain Services ==================================
	
	- "Um serviço de domínio é uma operação sem estado que cumpre uma tarefa específica do
	domínio. Muitas vezes, a melhor indicação de que você deve criar um Serviço no modelo
	de domínio é quando a operação que você precisa executar parece não se encaixar como um
	método em um Agregado ou um Objeto de Valor." - Vernon, Vaughn;
	
	- Uma entidade pode realizar uma ação que vai afetar todas as entidades?
	- Como realizar uma operação em Lote?
	- Como calcular algo cuja as informações constam em mais de uma entidade?
	
	- Quando houver muitos Domain Services em seu projeto, TALVEZ, isso pode indicar
	que seus agregados estão anêmicos;
	
	- Domain Services são Stateless (sem estado);

================================== Repositorios ==================================
	- "Um repositório comumentese refere a um local de armazenamento, geralmente considerado
	um local de segurança ou preservação dos itens nele armazenados. Quando você armazena
	algo em um repositório e depois retorna para recuperá-lo, você espera que ele esteja no
	mesmo estado que estava quando você o colocou lá. Em algum momento, você pode optar por
	remover o item armazenado do repositório" - Vernon, Vaughn
	
	- "Esses objetos semelhantes a coleções são sobre persistência. Todo tipo Agregado persistente
	terá um repositório. De um modo geral, existe uma relação um-para-um entre tipo Agregado
	e um Repositorio" - Vernon, Vaughn